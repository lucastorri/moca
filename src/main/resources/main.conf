
akka {

  loglevel = "ERROR"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  cluster {
    roles = ${resolve.roles}
    seed-nodes = ${resolve.seeds}
    auto-down-unreachable-after = 10s
  }

  remote {
    netty.tcp {
      port = ${resolve.port}
      hostname = ${resolve.host}
    }
  }

}

moca {

  minion {
    journal-plugin-id = "store.journal.postgre"
  }

  master {
    journal-plugin-id = "store.journal.postgre"
    snapshot-plugin-id = "store.snapshot.postgre"
  }

  work-repo-id = "store.work.postgre"

  browser-provider-id = "browser.provider.webkit"

  partition-selector-id = "partition-selector.by-host"

  content-repo-id = "store.content.s3"

  content-serializer-id = "content-serializer.json"

  event-bus-id = "event-bus.unbuffered"

  serializer-service-id = "serializer-service.kryo"

}

store {

  journal {

    mem {
      class = "com.github.lucastorri.moca.store.journal.SharedInMemJournal"
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    mapdb {
      class = "com.github.lucastorri.moca.store.journal.MapDBJournal"
      directory = "journals"
      allocate-increment = 2MB
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    postgre {
      class = ${akka-persistence-sql-async.journal.class}
    }

  }

  snapshot {

    mem {
      class = "com.github.lucastorri.moca.store.snapshot.SharedInMemSnapshot"
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    mapdb {
      class = "com.github.lucastorri.moca.store.snapshot.MapDBSnapshot"
      directory = "snapshots"
      allocate-increment = 4MB
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    postgre {
      class = ${akka-persistence-sql-async.snapshot.class}
    }

  }

  work {

    mem {
      class = "com.github.lucastorri.moca.store.work.InMemWorkRepo"
    }

    postgre {
      class = "com.github.lucastorri.moca.store.work.PgWorkRepo"
      connection {
        dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
        properties {
          databaseName = "moca"
        }
      }
    }

  }

  content {

    mem {
      class = "com.github.lucastorri.moca.store.content.InMemContentRepo"
    }

    fs {
      class = "com.github.lucastorri.moca.store.content.FSContentRepo"
      directory = "contents"
    }

    s3 {
      class = "com.github.lucastorri.moca.store.content.S3ContentRepo"
      bucket-name = "moca-downloaded-content"
      access-key = "AKIAIOSFODNN7EXAMPLE"
      secret-key = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
      endpoint = "http://localhost:4568"
    }

  }

}

browser {

  html-charset = "utf-8"
  load-timeout = 20s
  user-agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36"

  provider {

    webkit {
      class = "com.github.lucastorri.moca.browser.webkit.WebKitBrowserProvider"
      width = 1024
      height = 768
      headless = true
      enable-js = true
      starting-windows = 5
    }

  }

}

partition-selector {

  by-host {
    class = "com.github.lucastorri.moca.partition.ByHostPartitionSelector"
  }

}

event-bus {

  unbuffered {
    class = "com.github.lucastorri.moca.event.UnbufferedEventBus"
  }

}

content-serializer {

  json {
    class = "com.github.lucastorri.moca.store.content.serializer.JsonContentSerializer"
  }

}

serializer-service {

  kryo {
    class = "com.github.lucastorri.moca.store.serialization.KryoSerializerService"
  }

}

akka-persistence-sql-async {

  journal.class = "akka.persistence.journal.sqlasync.PostgreSQLAsyncWriteJournal"
  snapshot.class = "akka.persistence.snapshot.sqlasync.PostgreSQLSnapshotStore"

  user = "akka-persistence"
  password = "akka-persistence"
  url = "jdbc:postgresql://localhost/akka-persistence"
  max-pool-size = 5
  wait-queue-capacity = 10000
  journal-table-name = "journal"
  snapshot-table-name = "snapshot"

}