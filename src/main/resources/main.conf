
akka {

  loglevel = "ERROR"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  cluster {
    roles = ${resolve.roles}
    seed-nodes = ${resolve.seeds}
    auto-down-unreachable-after = 10s
  }

  remote {
    netty.tcp {
      port = ${resolve.port}
      hostname = ${resolve.host}
    }
  }

}

moca {

  minion {
    journal-plugin-id = "store.journal.mapdb"
  }

  master {
    journal-plugin-id = "store.journal.mapdb"
    snapshot-plugin-id = "store.snapshot.mapdb"

    scheduler.journal-plugin-id = "store.journal.mapdb"
    scheduler.snapshot-plugin-id = "store.snapshot.mapdb"
  }

  work-repo-id = "store.work.journal-mapdb"

  content-repo-id = "store.content.fs"

  browser-provider-id = "browser.provider.webkit"

  partition-selector-id = "partition-selector.by-host"

  task-scheduler-id = "task-scheduler.by-partition"

  task-handler-id = "task-handler.basic"

  event-bus-id = "event-bus.unbuffered"

  content-serializer-id = "content-serializer.json"

}

store {

  journal {

    mem {
      class = "com.github.lucastorri.moca.store.journal.SharedInMemJournal"
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    mapdb {
      class = "com.github.lucastorri.moca.store.journal.MapDBJournal"
      directory = "journals"
      allocate-increment = 2MB
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

  }

  snapshot {

    mem {
      class = "com.github.lucastorri.moca.store.snapshot.SharedInMemSnapshot"
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

    mapdb {
      class = "com.github.lucastorri.moca.store.snapshot.MapDBSnapshot"
      directory = "snapshots"
      allocate-increment = 4MB
      plugin-dispatcher = "akka.actor.default-dispatcher"
    }

  }

  work {

    mem {
      class = "com.github.lucastorri.moca.store.work.InMemWorkRepo"
    }

    journal-mapdb {
      class = "com.github.lucastorri.moca.store.work.MapDBWorkRepo"
      directory = "work"
      journal-plugin-id = "store.journal.mapdb"
      snapshot-plugin-id = "store.snapshot.mapdb"
    }

  }

  content {

    mem {
      class = "com.github.lucastorri.moca.store.content.InMemContentRepo"
    }

    fs {
      class = "com.github.lucastorri.moca.store.content.FSContentRepo"
      directory = "contents"
    }

  }

}

browser {

  html-charset = "utf-8"
  load-timeout = 10s
  user-agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36"

  provider {

    webkit {
      class = "com.github.lucastorri.moca.browser.webkit.WebKitBrowserProvider"
      width = 1024
      height = 768
      headless = true
      enable-js = true
    }

  }

}

partition-selector {

  by-host {
    class = "com.github.lucastorri.moca.partition.ByHostPartitionSelector"
  }

}

task-scheduler {

  by-partition {
    class = "com.github.lucastorri.moca.role.master.scheduler.PartitionSchedulerCreator"
  }

}

task-handler {

  basic {
    class = "com.github.lucastorri.moca.role.master.tasks.BasicTaskHandlerCreator"
  }

}

event-bus {

  unbuffered {
    class = "com.github.lucastorri.moca.event.UnbufferedEventBus"
  }

}

content-serializer {

  json {
    class = "com.github.lucastorri.moca.store.content.serializer.JsonContentSerializer"
  }

}